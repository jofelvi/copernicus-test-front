import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../store';
import {createUser, deleteUser, getOurUsers, getUserById, getUsers, updateUser} from './userAPI';
import {IUser, UserState, UserTypeArray} from "../../models/UserInterface";

const initialState: UserState = {
    user : {
        "id":1,
        "email":"",
        "first":"",
        "last":"",
        "company":"",
        "created_at":"",
        "country":""
    },
    status: 'idle',
    users: [],
    usersInternal: [],
    editBtn: false,
    toogle: false
};

export const getUsersAsync = createAsyncThunk(
    'users/fetchUsers',
    async () => {
        const response = await getUsers();
        return response;
    }
);

export const getOurUsersAsync = createAsyncThunk(
    'user/fetchUserAll',
    async () => {
        const response = await getOurUsers();
        return response;
    }
);
export const getUserByIdAsync = createAsyncThunk(
    'user/fetchUserById',
    async (id: number) => {
        const response = await getUserById(id);
        return response;
    }
);

export const createUserAsync = createAsyncThunk(
    'user/createUser',
    async (user: any) => {
        const response = await createUser(user);
        return response;
    }
);

export const updateUserAsync = createAsyncThunk(
    'user/updateUser',
    async (user: any) => {
        const response = await updateUser(user);
        return response;
    }
);

export const deleteUserAsync = createAsyncThunk(
    'user/deleteUser',
    async (user: any) => {
        const response = await deleteUser(user);
        return response;
    }
);


export const userSlice = createSlice({
    name: 'user',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        saveUserForEdit: (state, action: PayloadAction<IUser>) => {
            state.user = action.payload
        },
        editStatus: (state, action: PayloadAction<boolean>) => {
            state.editBtn = action.payload
        },
        toogleStatus: (state, action: PayloadAction<boolean>) => {
            state.toogle = action.payload
        },

    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getUsersAsync.pending || getUserByIdAsync.pending , (state) => {
                state.status = 'loading';
            })
            .addCase(getUsersAsync.rejected || getUserByIdAsync.pending , (state) => {
                state.status = 'failed';
            })
            .addCase(getOurUsersAsync.rejected || getOurUsersAsync.pending , (state) => {
                state.status = 'failed';
            })
            .addCase(createUserAsync.rejected || getOurUsersAsync.pending , (state) => {
                state.status = 'failed';
            })
            .addCase(getUsersAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.users = action.payload ;
            })
            .addCase(getUserByIdAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.user = action.payload;
            })
            .addCase(getOurUsersAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.usersInternal = action.payload;
            })
            .addCase(createUserAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                // @ts-ignore
                state.user = action.payload;
            })
            .addCase(updateUserAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                // @ts-ignore
                state.user = action.payload;
            })
            .addCase(deleteUserAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                // @ts-ignore
                state.user = action.payload;
            })

    },
});

export const {saveUserForEdit, editStatus, toogleStatus } = userSlice.actions;


export const selectUser = (state: RootState) => state.user.user;
export const selectUsers = (state: RootState) => state.user.users;
export const selectUsersInternal = (state: RootState) => state.user.usersInternal;
export const selectUserStatus = (state: RootState) => state.user.user;
export const selectEditStatus = (state: RootState) => state.user.editBtn;
export const selectToogle = (state: RootState) => state.user.editBtn;




export default userSlice.reducer;
